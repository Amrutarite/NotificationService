name: Release

on:
  push:
    tags:
      - "v*-dev"
      - "v*-qa"

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  tagify:
    name: Get Tag
    if: ${{ contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    outputs:
      the_tag: ${{ steps.latest_tag.outputs.TAG_NAME }}
      version_number: ${{ steps.version.outputs.VERSION_NUMBER }}
    steps:
      - name: Get Tag
        id: latest_tag
        run: |
          echo "TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

  BuildAndUnitTests:
    env:
      SOLUTION: 'NotificationService.sln'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x  # Updated to support .NET 8.0

      - name: Restore dependencies
        run: dotnet restore $SOLUTION

      - name: Build
        run: dotnet build $SOLUTION --no-restore

      - name: Test
        run: dotnet test $SOLUTION --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" || true

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Dot NET Tests
          path: "**/*.trx"   # Fixed test report file path issue
          reporter: dotnet-trx
          fail-on-error: true

  containerize:
    name: Containerize
    needs: [tagify, BuildAndUnitTests]
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'qa') || endsWith(needs.tagify.outputs.the_tag, 'dev') }}
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'

      - name: Debug Folder Structure
        run: |
          echo "Checking available folders..."
          ls -R

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.REPOSITORY || 'notification_service' }}
        
        run: |
          # Check if repository exists
          echo "Checking if the repository exists in ECR: $REGISTRY/$REPOSITORY"
          
          # Get tag parts
          IFS='-' read -r VERSION_ONLY ENVIRONMENT <<< "${{ needs.tagify.outputs.the_tag }}"
          
          # Construct tags
          DEV_TAG=$REGISTRY/$REPOSITORY:$VERSION_ONLY-dev
          PROD_TAG=$REGISTRY/$REPOSITORY:${{ needs.tagify.outputs.the_tag }}
          
          echo "Version: $VERSION_ONLY"
          echo "Environment: $ENVIRONMENT"
          echo "Dev tag: $DEV_TAG"
          echo "Prod tag: $PROD_TAG"

          # Build Docker image
          docker build -f NotificationService/Dockerfile \
            -t $PROD_TAG \
            -t $DEV_TAG \
            NotificationService/

          # Push Docker image to ECR
          docker push $PROD_TAG
          docker push $DEV_TAG

      - name: Cleanup
        run: |
          docker logout
        if: always()
