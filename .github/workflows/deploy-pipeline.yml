name: Deploy to AWS EC2

on:
  push:
    tags:
      - "v*-dev-deploy"

  workflow_dispatch:
    inputs:
      deploy_version:
        type: string
        description: Version to deploy in format vX.Y.Z
      deploy_environment:
        type: choice
        description: Deploy Environment
        options:
          - dev

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.REPOSITORY }}
  IMAGE_NAME: notification25
  EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}

jobs:
  tagify:
    name: Get Tag
    runs-on: ubuntu-latest
    outputs:
      the_tag: ${{ steps.deploy_tag.outputs.TAG_NAME }}
    steps:
      - name: Extract Deploy Tag (Push Event)
        if: github.event_name == 'push'
        run: |
          full_tag=${GITHUB_REF#refs/*/}
          deploy_tag=${full_tag%-deploy}
          echo "VERSION=${deploy_tag}" >> "$GITHUB_ENV"

      - name: Extract Deploy Tag (Manual Trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "VERSION=${{ github.event.inputs.deploy_version }}-${{ github.event.inputs.deploy_environment }}" >> "$GITHUB_ENV"

      - name: Set Output Variable
        id: deploy_tag
        run: |
          echo "TAG_NAME=${{ env.VERSION }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to EC2
    needs: [tagify]
    runs-on: ubuntu-latest
    if: endsWith(needs.tagify.outputs.the_tag, 'dev')
    env:
      TAG_VERSION: ${{ needs.tagify.outputs.the_tag }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/DeploymentKey.pem
          chmod 600 ~/.ssh/DeploymentKey.pem

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy Application on EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/DeploymentKey.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e
            echo "Logging into ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            echo "Checking if container exists..."
            container_exists=$(docker ps -a -q -f name=notification1)
            if [ -n "$container_exists" ]; then
              echo "Stopping and removing existing container..."
              docker stop notification1 || true
              docker rm -f notification1 || true
            fi

            echo "Checking if port 8080 is in use..."
            used_pid=$(sudo lsof -ti :8080)
            if [ -n "$used_pid" ]; then
              echo "Port 8080 is in use by PID $used_pid, stopping process..."
              sudo kill -9 $used_pid
            fi

            echo "Pulling latest image..."
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPOSITORY }}:${{ needs.tagify.outputs.the_tag }}

            echo "Running new container..."
            docker run -d -p 8080:8080 --name notification1 ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPOSITORY }}:${{ needs.tagify.outputs.the_tag }}
          EOF

      - name: Cleanup SSH Key
        run: rm -f ~/.ssh/DeploymentKey.pem
