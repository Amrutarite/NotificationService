name: Deploy to EC2

on:
  push:
    branches:
      - "main"  # Trigger on main branch
    tags:
      - "v*-dev-deploy"  # Trigger only on tags for 'dev' deployment
  workflow_dispatch:
    inputs:
      deploy_version:
        type: string
        description: Version to deploy in format vX.Y.Z
        default: "v1.0.0"  # Default version in case no tag exists
      deploy_environment:
        type: choice
        description: Deploy Environment
        options:
          - dev
          - prod

jobs:
  deploy:
    name: Build, Push Docker Image, and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }}

      - name: Build Docker Image
        run: |
          docker build -t notificationservice:latest -f NotificationService/Dockerfile .

      - name: Set IMAGE_TAG
        run: |
          # Use manually defined version if no tag exists
          IMAGE_TAG="${{ github.event.inputs.deploy_version }}"
          
          # Check if IMAGE_TAG is empty, and set a default value if it is
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG="v1.0.0"
          fi

          echo "Using IMAGE_TAG: $IMAGE_TAG"  # Debug the IMAGE_TAG

      - name: Tag Docker Image
        run: |
          echo "Tagging image with $IMAGE_TAG"
          # Ensure IMAGE_TAG is formatted correctly
          docker tag notificationservice:latest ${{ secrets.REPOSITORY }}:$IMAGE_TAG

      - name: Push Docker Image
        run: |
          echo "Pushing Docker image with tag $IMAGE_TAG"
          # Ensure that IMAGE_TAG is used correctly in the push command
          docker push ${{ secrets.REPOSITORY }}:$IMAGE_TAG
          docker push ${{ secrets.REPOSITORY }}:latest

      - name: Create SSH Key File
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/RportingKeyPair.pem
          chmod 600 ~/.ssh/RportingKeyPair.pem

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/RportingKeyPair.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
            sudo systemctl start docker &&
            sudo usermod -aG docker ec2-user &&
            docker stop notificationservice1 || true &&
            docker rm notificationservice1 || true &&
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }} &&
            docker pull ${{ secrets.REPOSITORY }}:$IMAGE_TAG &&
            docker run -d -p 80:80 --name notificationservice1 ${{ secrets.REPOSITORY }}:$IMAGE_TAG
          "
